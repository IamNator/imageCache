// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: imageCache/v1/upload.proto

package imageCache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RkUploaderServiceClient is the client API for RkUploaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RkUploaderServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (RkUploaderService_UploadFileClient, error)
}

type rkUploaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRkUploaderServiceClient(cc grpc.ClientConnInterface) RkUploaderServiceClient {
	return &rkUploaderServiceClient{cc}
}

func (c *rkUploaderServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (RkUploaderService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &RkUploaderService_ServiceDesc.Streams[0], "/proto.rkUploaderService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rkUploaderServiceUploadFileClient{stream}
	return x, nil
}

type RkUploaderService_UploadFileClient interface {
	Send(*UploadRequestType) error
	CloseAndRecv() (*UploadResponseType, error)
	grpc.ClientStream
}

type rkUploaderServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *rkUploaderServiceUploadFileClient) Send(m *UploadRequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rkUploaderServiceUploadFileClient) CloseAndRecv() (*UploadResponseType, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RkUploaderServiceServer is the server API for RkUploaderService service.
// All implementations should embed UnimplementedRkUploaderServiceServer
// for forward compatibility
type RkUploaderServiceServer interface {
	UploadFile(RkUploaderService_UploadFileServer) error
}

// UnimplementedRkUploaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRkUploaderServiceServer struct {
}

func (UnimplementedRkUploaderServiceServer) UploadFile(RkUploaderService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

// UnsafeRkUploaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RkUploaderServiceServer will
// result in compilation errors.
type UnsafeRkUploaderServiceServer interface {
	mustEmbedUnimplementedRkUploaderServiceServer()
}

func RegisterRkUploaderServiceServer(s grpc.ServiceRegistrar, srv RkUploaderServiceServer) {
	s.RegisterService(&RkUploaderService_ServiceDesc, srv)
}

func _RkUploaderService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RkUploaderServiceServer).UploadFile(&rkUploaderServiceUploadFileServer{stream})
}

type RkUploaderService_UploadFileServer interface {
	SendAndClose(*UploadResponseType) error
	Recv() (*UploadRequestType, error)
	grpc.ServerStream
}

type rkUploaderServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *rkUploaderServiceUploadFileServer) SendAndClose(m *UploadResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rkUploaderServiceUploadFileServer) Recv() (*UploadRequestType, error) {
	m := new(UploadRequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RkUploaderService_ServiceDesc is the grpc.ServiceDesc for RkUploaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RkUploaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rkUploaderService",
	HandlerType: (*RkUploaderServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _RkUploaderService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "imageCache/v1/upload.proto",
}
